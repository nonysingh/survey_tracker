console.log('Script loaded successfully on Compare Surveys tab');
document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("question-form");
    const optionsList = document.getElementById("options-list");
    const optionInput = document.getElementById("option-input");
    const container = document.getElementById("questions-container");

    let options = [];

    function addOption() {
        const optionValue = optionInput.value.trim();
        if (optionValue === "") {
            alert("Option cannot be empty!");
            return;
        }
        options.push(optionValue);
        optionInput.value = "";
        renderOptions();
    }

    function removeOption(index) {
        options.splice(index, 1);
        renderOptions();
    }

    function renderOptions() {
        optionsList.innerHTML = "";
        options.forEach((option, index) => {
            const listItem = document.createElement("li");
            listItem.className = "list-group-item d-flex justify-content-between align-items-center";
            listItem.innerHTML = `
                ${option}
                <button type="button" class="btn btn-danger btn-sm" onclick="removeOption(${index})">X</button>
            `;
            optionsList.appendChild(listItem);
        });
    }

    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const questionNumber = document.getElementById("question-number").value.trim();
        const questionText = document.getElementById("question").value.trim();

        if (questionNumber === "" || questionText === "" || options.length === 0) {
            alert("Please fill out all fields and add at least one option.");
            return;
        }

        const response = await fetch("/questions", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                question_number: questionNumber,
                question_text: questionText,
                options: options,
            }),
        });

        if (response.ok) {
            alert("Question added successfully!");
            form.reset();
            options = [];
            renderOptions();
            loadQuestions();
        } else {
            const result = await response.json();
            alert(result.message);
        }
    });

    async function loadQuestions() {
        const response = await fetch("/questions");
        const questions = await response.json();

        const container = document.getElementById("questions-container");
        container.innerHTML = ""; // Clear the container

        questions.forEach((q) => {
            const div = document.createElement("div");
            div.className = "mb-3 p-3 border rounded";
            div.setAttribute("data-id", q.id); // Add data-id attribute

            div.innerHTML = `
            <h5 class="card-title question-number">[${q.question_number}] ${q.question_text}</h5>
            <ul class="list-group">
                ${q.options.map((option) => `<li class="list-group-item option">${option}</li>`).join("")}
            </ul>
            <div class="mt-2">
                <button class="btn btn-warning btn-sm me-2" onclick="editQuestion(${q.id})">Edit</button>
                <button class="btn btn-danger btn-sm" onclick="deleteQuestion(${q.id})">Delete</button>
            </div>
        `;
            container.appendChild(div);
        });
    }


// Add a function to handle the exit button click
    function exitForm() {
        if (confirm("Are you sure you want to exit? Unsaved changes will be lost.")) {
            window.location.href = "/goodbye"; // Redirect to the goodbye page
        }
    }

    async function loadSurveyById() {
        console.log("Load Survey button clicked!");  // Debug log
        const surveyId = document.getElementById("survey-id").value.trim();

        if (!surveyId) {
            alert("Please enter a survey ID!");
            return;
        }

        try {
            const response = await fetch(`/surveys/${surveyId}`);
            console.log("Fetch response:", response);  // Debug log
            if (response.ok) {
                const questions = await response.json();
                console.log("Survey questions loaded:", questions);  // Debug log

                const container = document.getElementById("questions-container");
                container.innerHTML = ""; // Clear existing questions

                questions.forEach((q) => {
                    const div = document.createElement("div");
                    div.className = "mb-3 p-3 border rounded";
                    div.innerHTML = `
                    <h5>[${q.question_number}] ${q.question_text}</h5>
                    <ul class="list-group">
                        ${q.options.map((option) => `<li class="list-group-item">${option}</li>`).join("")}
                    </ul>
                `;
                    container.appendChild(div);
                });

                alert(`Survey ID ${surveyId} loaded successfully!`);
            } else {
                const result = await response.json();
                console.error("Error response:", result);  // Debug log
                alert(result.message);
            }
        } catch (error) {
            console.error("Error loading survey:", error);  // Debug log
            alert("An error occurred while loading the survey.");
        }
    }


    async function loadSavedSurveys() {
        try {
            const response = await fetch("/surveys");
            if (response.ok) {
                const surveys = await response.json();

                const savedSurveysList = document.getElementById("saved-surveys");
                savedSurveysList.innerHTML = ""; // Clear existing list

                surveys.forEach((survey) => {
                    const listItem = document.createElement("li");
                    listItem.className = "list-group-item";
                    listItem.textContent = `ID: ${survey.id} - Name: ${survey.name}`;
                    savedSurveysList.appendChild(listItem);
                });
            } else {
                console.error("Failed to load saved surveys");
            }
        } catch (error) {
            console.error("Error loading saved surveys:", error);
        }
    }

    // Function to display the survey
    function displaySurvey(survey) {
        const questionsContainer = document.getElementById('questions-container');
        questionsContainer.innerHTML = ''; // Clear existing questions

        survey.forEach(question => {
            const questionElement = document.createElement('div');
            questionElement.className = 'card mb-3';
            questionElement.innerHTML = `
            <div class="card-body">
                <h5 class="card-title">Question ${question.question_number}</h5>
                <p class="card-text">${question.question_text}</p>
                <ul class="list-group">
                    ${question.options.map(option => `<li class="list-group-item">${option}</li>`).join('')}
                </ul>
            </div>
        `;
            questionsContainer.appendChild(questionElement);
        });
    }


// Delete a question
    async function deleteQuestion(id) {
        if (!confirm("Are you sure you want to delete this question?")) return;

        try {
            const response = await fetch(`/questions/${id}`, { method: "DELETE" });
            if (response.ok) {
                alert("Question deleted successfully!");
                loadQuestions(); // Reload questions after deletion
            } else {
                const result = await response.json();
                alert(result.message || "Failed to delete the question.");
            }
        } catch (error) {
            console.error("Error deleting question:", error);
            alert("An error occurred while deleting the question.");
        }
    }

// Edit a question
    function editQuestion(id) {
        console.log("Edit button clicked for question ID:", id); // Debug log

        // Find the question container using the question ID
        const question = document.querySelector(`#questions-container div[data-id="${id}"]`);

        if (!question) {
            console.error("Question not found in the DOM for ID:", id); // Debug log
            alert("Question not found.");
            return;
        }

        console.log("Question element found in DOM:", question); // Debug log

        // Extract details
        const questionNumber = question.querySelector(".card-title").textContent.trim().match(/\[(.*?)\]/)[1];
        const questionText = question.querySelector(".card-title").textContent.trim().split('] ')[1];
        const options = Array.from(question.querySelectorAll(".list-group-item")).map(opt => opt.textContent.trim());

        console.log("Extracted Question Details:", { questionNumber, questionText, options }); // Debug log

        // Prefill the edit form
        document.getElementById("edit-question-id").value = id;
        document.getElementById("edit-question-number").value = questionNumber;
        document.getElementById("edit-question-text").value = questionText;

        const editOptionsList = document.getElementById("edit-options-list");
        editOptionsList.innerHTML = "";

        // Render each option as an editable input field
        options.forEach((opt, index) => {
            const li = document.createElement("li");
            li.className = "list-group-item";

            const input = document.createElement("input");
            input.type = "text";
            input.className = "form-control mb-2 option-input";
            input.value = opt;
            input.dataset.index = index; // Add an index to identify the option
            li.appendChild(input);

            // Add delete button for each option
            const deleteButton = document.createElement("button");
            deleteButton.className = "btn btn-danger btn-sm ms-2";
            deleteButton.textContent = "X";
            deleteButton.onclick = function () {
                li.remove();
            };

            li.appendChild(deleteButton);
            editOptionsList.appendChild(li);
        });

        console.log("Prefilled Options as Inputs:", options); // Debug log

        // Show the edit form
        document.getElementById("edit-form-container").style.display = "block";
        console.log("Edit form is now visible"); // Debug log
    }



    async function deleteSurveyById() {
        const surveyId = document.getElementById("delete-survey-id").value.trim();

        if (!surveyId) {
            alert("Please enter a survey ID!");
            return;
        }

        if (!confirm(`Are you sure you want to delete Survey ID ${surveyId}? This action cannot be undone.`)) {
            return;
        }

        try {
            const response = await fetch(`/surveys/${surveyId}`, { method: "DELETE" });

            if (response.ok) {
                alert(`Survey ID ${surveyId} deleted successfully!`);
                document.getElementById("delete-survey-id").value = ""; // Clear input
                loadSavedSurveys(); // Refresh the list of available surveys
            } else {
                const result = await response.json();
                alert(result.message);
            }
        } catch (error) {
            console.error("Error deleting survey:", error);
            alert("An error occurred while deleting the survey.");
        }
    }


// Handle edit form submission
    document.getElementById("edit-form").addEventListener("submit", async (e) => {
        e.preventDefault();

        const id = document.getElementById("edit-question-id").value;
        const questionNumber = document.getElementById("edit-question-number").value.trim();
        const questionText = document.getElementById("edit-question-text").value.trim();

        // Get updated options from the input fields
        const options = Array.from(document.querySelectorAll("#edit-options-list .option-input")).map(
            (input) => input.value.trim()
        );

        // Validate inputs
        if (!questionNumber || !questionText || options.length === 0 || options.some(opt => opt === "")) {
            alert("All fields and at least one option are required!");
            return;
        }

        // Send updated data to the server
        const response = await fetch(`/questions/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ question_number: questionNumber, question_text: questionText, options }),
        });

        if (response.ok) {
            alert("Question updated successfully!");
            document.getElementById("edit-form").reset();
            document.getElementById("edit-form-container").style.display = "none"; // Hide the edit form
            loadQuestions(); // Reload questions
        } else {
            alert("Failed to update the question.");
        }
    });



    document.getElementById("save-survey").addEventListener("click", async () => {
        const surveyName = document.getElementById("save-survey-name").value.trim();
        if (!surveyName) {
            alert("Please enter a survey name!");
            return;
        }

        const response = await fetch("/surveys", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ name: surveyName }),
        });

        if (response.ok) {
            alert(`Survey "${surveyName}" saved successfully!`);
            document.getElementById("save-survey-name").value = "";
        } else {
            const result = await response.json();
            alert(result.message);
        }
    });

    document.getElementById("save-and-download-survey").addEventListener("click", async () => {
        const surveyName = document.getElementById("save-and-download-survey-name").value.trim();
        if (!surveyName) {
            alert("Please enter a survey name!");
            return;
        }

        const response = await fetch("/save_and_export", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ name: surveyName }),
        });

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = `${surveyName}.xlsx`;
            document.body.appendChild(a);
            a.click();
            a.remove();
            alert(`Survey "${surveyName}" saved and downloaded successfully!`);
            document.getElementById("save-and-download-survey-name").value = "";
        } else {
            const result = await response.json();
            alert(result.message);
        }
    });

    async function compareSurveys() {
        const survey1Id = document.getElementById("survey1-id").value.trim();
        const survey2Id = document.getElementById("survey2-id").value.trim();

        if (!survey1Id || !survey2Id) {
            alert("Please enter both Survey IDs!");
            return;
        }

        // Open the comparison page in a new tab
        const compareUrl = `/compare_surveys?survey1_id=${survey1Id}&survey2_id=${survey2Id}`;
        window.open(compareUrl, '_blank');
    }



// Function to render a survey with comparison
    function renderSurveyWithComparison(survey, comparisonMap, containerId, isComparisonTarget) {
        const container = document.getElementById(containerId);
        container.innerHTML = ""; // Clear previous content

        if (survey.length === 0) {
            container.textContent = "No questions available for this survey.";
            return;
        }

        survey.forEach((question) => {
            const questionCard = document.createElement("div");
            questionCard.className = "card mb-3";
            questionCard.style.backgroundColor = isComparisonTarget && !comparisonMap.has(question.question_number)
                ? "#ffccff" // Highlight question numbers missing in the other survey
                : "";

            const questionTitle = `<h5 class="card-title">[${question.question_number}] ${question.question_text}</h5>`;

            const optionsList = question.options
                .map(option => {
                    const isDifferentOption =
                        isComparisonTarget && comparisonMap.has(question.question_number)
                        && !comparisonMap.get(question.question_number).options.includes(option);

                    return `<li class="list-group-item" style="background-color: ${
                        isDifferentOption ? "#99ff66" : ""
                    }">${option}</li>`;
                })
                .join("");

            questionCard.innerHTML = `
            <div class="card-body">
                ${questionTitle}
                <ul class="list-group">
                    ${optionsList}
                </ul>
            </div>
        `;

            container.appendChild(questionCard);
        });
    }


// Function to render a survey into a container
    function renderSurvey(survey, containerId) {
        const container = document.getElementById(containerId);
        container.innerHTML = ""; // Clear previous content

        if (survey.length === 0) {
            container.textContent = "No questions available for this survey.";
            return;
        }

        survey.forEach((question) => {
            const questionCard = document.createElement("div");
            questionCard.className = "card mb-3";
            questionCard.setAttribute("data-id", question.id); // Add data-id for easy identification
            questionCard.innerHTML = `
            <div class="card-body">
                <h5 class="card-title question-number">[${question.question_number}] ${question.question_text}</h5>
                <ul class="list-group">
                    ${question.options.map((option) => `<li class="list-group-item option">${option}</li>`).join("")}
                </ul>
                <div class="mt-2">
                    <button class="btn btn-warning btn-sm me-2" onclick="editQuestion(${question.id})">Edit</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteQuestion(${question.id})">Delete</button>
                </div>
            </div>
        `;
            container.appendChild(questionCard);
        });
    }

    function addEditOption() {
        const editOptionInput = document.getElementById("edit-option-input");
        const editOptionsList = document.getElementById("edit-options-list");
        const optionValue = editOptionInput.value.trim();

        if (optionValue === "") {
            alert("Option cannot be empty!");
            return;
        }

        // Add the new option to the list
        const li = document.createElement("li");
        li.className = "list-group-item option";
        li.textContent = optionValue;

        // Add a delete button for the new option
        const deleteButton = document.createElement("button");
        deleteButton.className = "btn btn-danger btn-sm ms-2";
        deleteButton.textContent = "X";
        deleteButton.onclick = function () {
            li.remove();
        };

        li.appendChild(deleteButton);
        editOptionsList.appendChild(li);

        // Clear the input field
        editOptionInput.value = "";
    }

    function searchSurvey(containerId, searchTerm) {
        const container = document.getElementById(containerId);
        const items = container.querySelectorAll("li");
        searchTerm = searchTerm.toLowerCase();

        items.forEach((item) => {
            const text = item.textContent.toLowerCase();
            if (searchTerm === "") {
                console.log("Removing highlight from:", item);
                // Remove highlight if the search term is empty
                item.classList.remove("highlight");
            } else if (text.includes(searchTerm)) {
                console.log("Adding highlight to:", item);
                // Add highlight if there's a match
                item.classList.add("highlight");
            } else {
                // Remove highlight if there's no match
                item.classList.remove("highlight");
            }
        });
    }

    function clearSearch(inputId, containerId) {
        const searchInput = document.getElementById(inputId);
        searchInput.value = ""; // Clear the search box
        searchSurvey(containerId, ""); // Clear highlights
    }


    document.getElementById('search-survey1'); // Should return the input element for Survey 1
    document.getElementById('survey1-container'); // Should return the <ul> element for Survey 1
    document.getElementById('search-survey2'); // Should return the input element for Survey 2
    document.getElementById('survey2-container'); // Should return the <ul> element for Survey 2


    loadQuestions();
    // Call this function on page load
    loadSavedSurveys();


    window.addOption = addOption;
    window.removeOption = removeOption;
    window.exitForm = exitForm;
    window.loadSavedSurveys = loadSavedSurveys;
    window.displaySurvey = displaySurvey;
    window.loadSurveyById = loadSurveyById;
    window.deleteSurveyById = deleteSurveyById;
    window.compareSurveys = compareSurveys;
    window.loadQuestions = loadQuestions;
    window.deleteQuestion = deleteQuestion;
    window.editQuestion = editQuestion;
    window.addEditOption = addEditOption;
    window.searchSurvey = searchSurvey;
    window.clearSearch = clearSearch;

});
